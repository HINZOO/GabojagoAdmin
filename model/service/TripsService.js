const sequelize = require("../SequelizePool");
const tripsEntity = require("../entity/TripEntity")(sequelize);
// trip Í≤åÏãúÍ∏ÄÍ≥º Ìï¥ÏãúÌÉúÍ∑∏Î•º Ï°∞Ïù∏ÌïòÍ∏∞!
const tripHashTagEntity = require("../entity/TripHashTagEntity")(sequelize);
const tripImgsEntity = require("../entity/TripImgsEntity")(sequelize);
const PageVo = require("../vo/PageVo");
const {Op} = require("sequelize");

// trip Í≤åÏãúÍ∏Ä tripHashTag Ìï¥ÏãúÌÉúÍ∑∏ Ï°∞Ïù∏ Í¥ÄÍ≥Ñ 1 : N
// detail ÏïàÏóêÏÑú ÏÑ†Ïñ∏ÏùÑ ÌïòÎãà, detail ÏùÑ Ìò∏Ï∂úÌï†ÎïåÎßàÎã§ Ïã§Ìñâ? Ïù¥ÎêòÏÑú Î≥ÑÏπ≠Ïù¥ Ï§ëÎ≥µÎêúÎã§Îäî ÏóêÎü¨Í∞Ä Î∞úÏÉù => detail ÏÑúÎπÑÏä§ Î∞îÍπ•ÏóêÏÑú ÏÑ†Ïñ∏
tripsEntity.hasMany(tripHashTagEntity, {
    foreignKey: "t_id", // trip ÏùÑ Ï∞∏Ï°∞ÌïòÎäî tripHashTag Ïùò Ïô∏ÎûòÌÇ§
    as: "tags" // tripHashTag Î•º Î∂àÎü¨ÏôîÏùÑÎïå, trip Ïóê ÏÉùÏÑ±ÎêòÎäî ÌïÑÎìúÏù¥Î¶Ñ
})

tripsEntity.hasMany(tripImgsEntity,{
  foreignKey:"t_id",
  as: "imgs"
})

class TripsService {

    async list(reqParams) {
        try {
            const whereObj = {};
            const orderArr = [];
            if (reqParams.field && reqParams.value) {
                whereObj[reqParams.field] = {[Op.like]: `%${reqParams.value}%`};
            }
            if (reqParams.orderField && reqParams.orderDirect) {
                orderArr.push(reqParams.orderField);
                orderArr.push(reqParams.orderDirect);
            }
            const totalCnt = await tripsEntity.count({
                where: whereObj
            })
            console.log(JSON.stringify(whereObj));
            const pageVo = new PageVo(reqParams.page, totalCnt, reqParams);
            const trips = await tripsEntity.findAll({
                offset: pageVo.offset,
                limit: pageVo.rowLength,
                where: whereObj,
                order: [orderArr]
            })
            trips.pageVo = pageVo;
            return trips;
        } catch (e) {
            new Error(e)
        }
    }

    // ÏÇ≠Ï†úÌï† Ïù¥ÎØ∏ÏßÄ Î¶¨Ïä§Ìä∏
    async imgList(delImgId) {
        let imgList=null;
        let img=null;
        if(delImgId!=null){
            imgList=[];
            if(Array.isArray(delImgId) && delImgId.length > 0) {
                // id Í∞Ä Î∞∞Ïó¥ÏûÑÏùÑ Ï≤¥ÌÅ¨Ìï¥ÏïºÌïòÎäî Ïù¥Ïú†! ÏïàÌïòÎ©¥, id 2Í∏ÄÏûêÏù¥ÏÉÅÏù∏ Í≤ΩÏö∞ ÌïúÏûêÎ¶¨Î°ú ÎÇòÎâúÎã§.
                // ex) '77' -> id : '7'
                for (const id of delImgId) {
                    // let img=await tripImgsEntity.findByPk(id);
                    img = await tripImgsEntity.findOne({where: {ti_id: id}});
                    imgList.push(img);
                    // const img = await tripImgsEntity.findOne({where: {ti_id: id}});
                    // console.log("trip ÏÑúÎπÑÏä§ _ ÏÇ≠Ï†úÌï† img ÏÉÅÏÑ∏", img);
                    console.log("ÏÑúÎπÑÏä§ _ delImgId Ïó¨Îü¨Í∞ú img", img);
                    console.log("ÏÑúÎπÑÏä§ _ delImgId Ïó¨Îü¨Í∞ú imgList", imgList);
                }
            } else {
                img = await tripImgsEntity.findOne({where: {ti_id: delImgId}});
                imgList.push(img);
                console.log("ÏÑúÎπÑÏä§ _ delImgId 1Í∞ú img", img);
                console.log("ÏÑúÎπÑÏä§ _ delImgId 1Í∞ú imgList", imgList);
            }
        }
        return imgList;
    }

    //ÏÉÅÏÑ∏
    async detail(tId) {
        try {
            const tripId = parseInt(tId); // ÌååÎùºÎØ∏ÌÑ∞ Î¨∏ÏûêÏó¥Í∞í -> Ïà´ÏûêÎ°ú ÌòïÎ≥ÄÌôò
            if (isNaN(tripId)) { // Ïà´ÏûêÍ∞Ä ÏïÑÎãåÍ∞Ä(NaNÏù∏Í∞Ä)? Ïà´ÏûêÍ∞Ä ÏïÑÎãàÎ©¥ true
                return null;
            }
            const trip = await tripsEntity.findOne({
                where: {t_id: tripId}
                ,
                include: [ // Ìï¥ÏãúÌÉúÍ∑∏ Ïã§Ï†ú Ï°∞Ïù∏ (include : Ï¶âÏãúÎ°úÎî©) (ÏßÄÏó∞Î°úÎî©Ïù¥ ÏïàÎêúÎã§..)
                    {   model: tripHashTagEntity, // user ÌÖåÏù¥Î∏î
                        as: "tags",
                        required: false // true : inner Join, false : Left Join
                    }
                    ,
                    {   model: tripImgsEntity,
                        as: "imgs",
                        required: false
                    }
                ]
            })
            return trip;
        } catch (e) {
            new Error(e);
        }
    }

    async modify(trip,imgs) { // imgs : ÎùºÏö∞ÌÑ∞ req.files (ÏóÖÎ°úÎìúÌïú Ïù¥ÎØ∏ÏßÄ ÌååÏùº)
        let modify = 0;

        console.log("ÏÑúÎπÑÏä§ modify trip", trip);
        try {
            modify += await tripsEntity.update(
                trip,
                {where: {t_id: trip.t_id}}
            );
            // üçå00 -> await Í≤∞Í≥ºÎ•º parseInt Ìï®ÏàòÏù¥Ïö©Ìï¥ÏÑú Î¨∏ÏûêÏó¥ '0' => Ï†ïÏàòÎ°ú Î≥ÄÍ≤Ω => 0
            console.log("ÏÑúÎπÑÏä§ trip ÏàòÏ†ï modify",modify);
            // üëÄimgs Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ null Ï≤òÎ¶¨ÌïòÍ∏∞!
            if(!imgs) imgs=null;
            const mainImg = imgs.mainImg;
            const subImgs = imgs.img;
            const imgPaths = [];

            // Î©îÏù∏Ïù¥ÎØ∏ÏßÄ Îì±Î°ùÏãú Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ ÏàòÏ†ï update
            if(mainImg!=null) {
                // ‚ú®Î©îÏù∏Ïù¥ÎØ∏ÏßÄ Îì±Î°ùÏãú db Í∏∞Ï°¥ Î©îÏù∏Ïù¥ÎØ∏ÏßÄÏùò Ïù¥ÎØ∏ÏßÄÍ≤ΩÎ°ú ÏàòÏ†ï
                modify+= await tripImgsEntity.update(
                    {img_path: "/" + mainImg[0].path},
                    {where : {t_id: trip.t_id, img_main: true}}
                );
                console.log("ÏÑúÎπÑÏä§ Î©îÏù∏Ïù¥ÎØ∏ÏßÄ modify", modify);
                imgPaths.push("/"+mainImg[0].path);
                console.log("ÏÑúÎπÑÏä§ Î©îÏù∏Ïù¥ÎØ∏ÏßÄ mainImg", mainImg[0]);
                console.log("ÏÑúÎπÑÏä§ Î©îÏù∏Ïù¥ÎØ∏ÏßÄ mainImg.path", mainImg[0].path);
                console.log("ÏÑúÎπÑÏä§ Î©îÏù∏Ïù¥ÎØ∏ÏßÄ imgPaths", imgPaths);
            }
             console.log("ÏÑúÎπÑÏä§ mainImg", mainImg);

            // ÏÑúÎ∏åÏù¥ÎØ∏ÏßÄ ÌååÏùº Îì±Î°ùÏãú db Ïù¥ÎØ∏ÏßÄ Ï∂îÍ∞Ä create
            if(subImgs!=null) {
                for(const subImg of subImgs) {
                    console.log("ÏÑúÎπÑÏä§ subImg", subImg);
                    console.log("ÏÑúÎπÑÏä§ subImgs", subImgs);
                    const dbSubImg = await tripImgsEntity.create({
                        t_id: trip.t_id,
                        img_path: "/" + subImg.path,
                        img_main: false
                    }) // üëÄ create Ïùò Î∞òÌôòÍ∞íÏùÄ ÏÉùÏÑ±Îêú Í∞ùÏ≤¥ => ÏÉùÏÑ±Ïùò ÏÑ±Í≥µÏó¨Î∂Ä 0, 1 Ïù¥ ÏïÑÎãàÎã§!!
                    console.log("trip ÏÑúÎπÑÏä§_ÏÑúÎ∏åÏù¥ÎØ∏ÏßÄ db Îì±Î°ùÏÑ±Í≥µ create", dbSubImg);
                    if(dbSubImg!=null) { // create Î°ú Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÉùÏÑ±Ïù¥ ÏÑ±Í≥µÎêòÎ©¥ Í∞íÏù¥ null Ïù¥ ÏïÑÎãàÎã§!!
                        modify+=1; // Ïù¥Îïå ÏÉùÏÑ±Ïù¥ ÏÑ±Í≥µÎêú Í≤ÉÏùÑ modify Ïóê 1ÏùÑ ÎçîÌï¥Ï§ÄÎã§!
                    }
                    imgPaths.push("/"+subImg.path);
                    console.log("ÏÑúÎπÑÏä§ ÏÑúÎ∏åÏù¥ÎØ∏ÏßÄ Îì±Î°ù modify",modify);
                    console.log("ÏÑúÎπÑÏä§ ÏÑúÎ∏åÏù¥ÎØ∏ÏßÄ imgPaths", imgPaths);
                }
            }
            trip.img_path=imgPaths;

            if(trip.delImgId!=null) {
                if(Array.isArray(trip.delImgId) && trip.delImgId.length > 0){
                    for (const id of trip.delImgId) { // id Í∞Ä ÌïúÍ∞úÏù∏Í≤ΩÏö∞ '53' => '5','3'
                        modify += await tripImgsEntity.destroy({where: {ti_id: id}}); // db Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
                    }
                } else {
                    modify+=await tripImgsEntity.destroy({where:{ti_id: trip.delImgId}});
                }
            }
            return modify;

        } catch (e) {
            console.error(e);
            new Error(e);
            console.log(e);
        }
    }


    async remove(tId) {
        try {
            let del = await tripsEntity.destroy({where: {t_id: tId}})

            console.log("trip",trip);
            return del;
        } catch (e) {
            new Error(e);
        }
    }

    async register(trip) {
        try {
            return tripsEntity.create(trip)
        } catch (e) {
            new Error(e);
        }
    }
}

// module.exports=TripsService;
module.exports = new TripsService();